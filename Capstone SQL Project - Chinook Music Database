--In this first simple example, I use the entire string of the field in the schema I am referencing including the database name, because it is provided to me by intellisense.  From here on it to reduce the long strings of code I will leave off the database name.  
--1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to")

SELECT
     chinook.customers.CustomerId
     ,chinook.customers.LastName
     ,chinook.customers.FirstName
     ,chinook.customers.Country
FROM 
    chinook.customers
WHERE
    country <> 'USA'
;

--Here I type the schema in and the SQL editior I use will turn the schema blue if I spelled it correctly and it recognizes the table in the database.  Then, it allows me to use intellisence to select field or column if necessary.  This helps me with ensuring that I spelled the names of the schema/table and field/column correctly.  Oftentimes, I run across data that uses multiple different capitalization schemes and intermittently switches between using the plural and singular form of a word, which causes a lot of confusion. (ex:  employeePay, employee_pay, EmployeePay, EmployeesPay).  Except for #3, this is how complete the project.
--2. Show only the Customers from Brazil.

SELECT
     customers.CustomerId
     customers.LastName
     customers.FirstName
     customers.Country
FROM 
    customers
WHERE
    customers.Country = 'Brazil'
;

--In this one instance, I used aliases to show I know how they are used.  This was not my preferred method for this project, but I understand their may be corporate best practices that suggest we use a certain alias when referring to a certain table/schema when we are writing SQL.
--3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT
     inv.InvoiceId
     ,cust.LastName
     ,cust.FirstName
     ,inv.InvoiceDate
     ,inv.BillingCountry
FROM 
    customers cust
LEFT JOIN
    invoices inv
ON
    cust.CustomerId = inv.CustomerId
WHERE
    cust.Country = 'Brazil' 
;

--4. Show the Employees who are Sales Agents.

SELECT
     employees.EmployeeId
     ,employees.LastName
     ,employees.FirstName
     ,employees.Title
FROM 
    employees
WHERE
    employees.Title like '%Sales%' AND
    employees.Title like '%Agent%'
;
--5. Find a unique/distinct list of billing countries from the Invoice table.

SELECT distinct
    invoices.BillingCountry
FROM 
    invoices
ORDER BY 
    invoices.BillingCountry ASC
;

--6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT
      invoices.InvoiceId
     ,customers.SupportRepId AS Emp_ID
     ,employees.LastName
     ,employees.FirstName 
FROM 
    invoices
JOIN
    customers
ON
    invoices.CustomerId = customers.CustomerId
JOIN
    employees
ON
    customers.SupportRepId = employees.EmployeeId
--WHERE - Might be necessary depending on data
    --customers.SupportRepId = 3 OR
    --customers.SupportRepId = 4 OR
    --customers.SupportRepId = 5
ORDER BY
    invoices.InvoiceId ASC
;

--7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT
      invoices.InvoiceId
     ,invoices.Total
     ,invoices.CustomerId AS Cust_ID
     ,customers.LastName
     ,customers.FirstName
     ,customers.Country
     ,customers.SupportRepId AS Emp_ID
     ,employees.LastName
     ,employees.FirstName 
FROM 
    invoices
JOIN
    customers
ON
    invoices.CustomerId = customers.CustomerId
JOIN
    employees
ON
    customers.SupportRepId = employees.EmployeeId
--WHERE
    --chinook.customers.SupportRepId = 3 OR
    --chinook.customers.SupportRepId = 4 OR
    --chinook.customers.SupportRepId = 5
ORDER BY
    invoices.InvoiceId ASC
;

--8. How many Invoices were there in 2009?

SELECT
    COUNT(*)
FROM
    invoices
WHERE invoices.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';
;

--9. What are the total sales for 2009?

SELECT
    SUM(invoices.Total)
FROM
    invoices
WHERE invoices.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';
;

--10. Write a query that includes the purchased track name with each invoice line ID.

SELECT 
     tracks.Name
    ,invoice_items.InvoiceLineId
FROM
    tracks
JOIN
    invoice_items
ON
    tracks.TrackId = invoice_items.TrackId
ORDER BY
    invoice_items.InvoiceLineId ASC
;

--11. Write a query that includes the purchased track name AND artist name with ea invoice line ID.

SELECT 
     tracks.Name
    ,artists.Name
    ,invoice_items.InvoiceLineId
FROM
    tracks
JOIN
    invoice_items
ON
    tracks.TrackId = invoice_items.TrackId
JOIN
    albums
ON
    tracks.AlbumId = albums.AlbumId
JOIN
    artists
ON
    albums.ArtistId = artists.ArtistId
ORDER BY
    invoice_items.InvoiceLineId ASC
;

--12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT 
     tracks.Name
    ,albums.Title
    ,media_types.Name AS Media_Type
    ,genres.Name AS Genre
FROM
    tracks
JOIN
    albums      
ON
    tracks.AlbumId = albums.AlbumId
JOIN
    media_types
ON
    tracks.MediaTypeId = media_types.MediaTypeId
JOIN
    genres
ON
    tracks.GenreId = genres.GenreId
;

--13. Show the total sales made by each sales agent.

SELECT
     customers.SupportRepId AS Emp_ID
     ,employees.LastName
     ,employees.FirstName,
     ROUND(SUM(invoices.Total),2) AS 'Total_Sales' --ROUND makes it look like a dollar/cents variable type
FROM 
    invoices
JOIN
    customers
ON
    invoices.CustomerId = customers.CustomerId
JOIN
    employees
ON
    customers.SupportRepId = employees.EmployeeId
GROUP BY
    customers.SupportRepId
;

--14. Which sales agent made the most dollars in sales in 2009?

SELECT
     customers.SupportRepId AS Emp_ID
     ,employees.LastName
     ,employees.FirstName,
     ROUND(SUM(invoices.Total),2) AS 'Total_Sales'
FROM 
    invoices
JOIN
    customers
ON
    invoices.CustomerId = customers.CustomerId
JOIN
    employees
ON
    customers.SupportRepId = employees.EmployeeId
WHERE invoices.InvoiceDate LIKE '2009%'
    --AND emp.Title = 'Sales Support Agent' (alternative)
GROUP BY
    customers.SupportRepId
    --GROUP BY emp.LastName (alternative)
ORDER BY
    (ROUND(SUM(invoices.Total), 2)) DESC 
LIMIT 1  --Could leave this Limit out and or adjust to see top 3 earners (LIMIT 3)
;
